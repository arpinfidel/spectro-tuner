{"version":3,"file":"674.bundle.js","mappings":"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","sources":["webpack://tuner/./src/visualizer.worker.js"],"sourcesContent":["// Worker script for handling visualization with OffscreenCanvas\n\n// Constants for visualization\nconst HISTORY_SCALE = 1;\nconst CIRCLE_RADIUS = 1.5;\nconst BACKGROUND_COLOR = \"rgb(16,7,25)\";\nconst NOTE_NAMES = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\nconst SQUISH_FACTOR = 0.3;\n\n// Canvases and rendering contexts\nlet mainCanvas;\nlet bgCanvas;\nlet fftDetailCanvas;\nlet fftDetailBgCanvas;\nlet mainCtx;\nlet bgCtx;\nlet fftDetailCtx;\nlet fftDetailBgCtx;\nlet historySize;\n\n// Convert frequency to MIDI note number\nfunction frequencyToMidiNotes(frequencies) {\n    return frequencies.map(frequency => frequency.frequency > 31 ? 12 * Math.log2(frequency.frequency / 440) + 69 : 0);\n}\n\n// Get note class (0-11) from MIDI note number\nfunction getNoteClasses(midiNotes) {\n    return midiNotes.map(midiNote => midiNote % 12);\n}\n\nfunction getPosition(values, height, min, max, exponent = 2) {\n    return values.map(value => height * ((value - min) / (max - min)) ** exponent);\n}\n\n// Draw background elements (static)\nfunction drawBackground() {\n    if (!bgCanvas || !bgCtx) return;\n    \n    const notePositions = getPosition(\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], \n        bgCanvas.height, -0.5, 11.5, 1\n    );\n    \n    // Draw note lines\n    for (let i = 0; i < notePositions.length; i++) {\n        bgCtx.fillStyle = \"rgba(208, 215, 222, 0.5)\";\n        bgCtx.fillRect(35, bgCanvas.height - notePositions[i], historySize * HISTORY_SCALE, 1);\n    }\n\n    // Draw note labels\n    for (let i = 0; i < notePositions.length; i++) {\n        bgCtx.fillStyle = \"rgba(208, 215, 222, 1)\";\n        bgCtx.fillText(\n            `${NOTE_NAMES[i]}`, \n            10, \n            bgCanvas.height - notePositions[i] + 7\n        );\n    }\n}\n\n// Draw dynamic elements\nfunction drawDynamicElements(state) {\n    if (!mainCanvas || !mainCtx) return;\n    \n    if (state.fHistory.length == 0) {\n        return;\n    }\n    \n    const shiftAmount = Math.round(state.fHistory.length * SQUISH_FACTOR); \n    mainCtx.drawImage(mainCanvas, shiftAmount, 0, \n        mainCanvas.width - shiftAmount, mainCanvas.height,\n        0, 0, mainCanvas.width - shiftAmount, mainCanvas.height);\n    \n    // Clear rightmost column where new circles will be drawn\n    mainCtx.fillStyle = BACKGROUND_COLOR;\n    mainCtx.fillRect(mainCanvas.width - shiftAmount, 0, \n        shiftAmount, mainCanvas.height);\n\n    for (let i = 0; i < state.fHistory.length; i++) {\n        if (state.fHistory[i] === null || state.fHistory[i].length == 0) continue;\n        \n        const freqs = state.fHistory[i].slice(0, 30);\n        const midiNotes = frequencyToMidiNotes(freqs);\n        const noteClasses = getNoteClasses(midiNotes);\n        const hues = noteClasses.map(noteClass => (noteClass+3) * (360 / 12));\n        \n        for (let j = 0; j < midiNotes.length; j++) {\n            const hue = hues[j];\n            const noteClass = noteClasses[j];\n            mainCtx.beginPath();\n            mainCtx.fillStyle = `hsla(${hue}, 100%, 70%, ${freqs[j].magnitude})`;\n            mainCtx.arc(\n                mainCanvas.width - i,\n                mainCanvas.height - ((noteClass + 0.5)%12) / 12 * mainCanvas.height,\n                CIRCLE_RADIUS,\n                0,\n                2 * Math.PI\n            );\n            mainCtx.fill();\n        }\n    }\n}\n\nfunction renderVisualization(state) {\n    drawDynamicElements(state);\n}\n\nlet maxMagnitude = 0;\n// Draw detailed FFT spectrum\nfunction renderFFTDetail(state) {\n    if (!fftDetailCanvas || !fftDetailCtx || !state.currentFs) return;\n    if (state.currentRawFs.length === 0) return;\n\n    // Clear canvas\n    fftDetailCtx.fillStyle = BACKGROUND_COLOR;\n    fftDetailCtx.fillRect(0, 0, fftDetailCanvas.width, fftDetailCanvas.height);\n\n    let freqs = [...state.currentRawFs].sort((a, b) => b.magnitude - a.magnitude).slice(0, 1000);\n    const thresholdMagnitude = freqs.length > 0 ? freqs[freqs.length*0.1].magnitude : 1e9;\n    maxMagnitude = Math.max(maxMagnitude*0.99995, freqs[0].magnitude);\n    freqs = [...freqs].sort((a, b) => a.frequency - b.frequency);\n    if (freqs.length === 0) return;\n\n    const minFreq = 20;\n    const maxFreq = 20000;\n\n    // Draw frequency spectrum\n    fftDetailCtx.strokeStyle = 'rgba(255, 255, 255, 0.7)';\n    fftDetailCtx.lineWidth = 2;\n    fftDetailCtx.beginPath();\n\n    const logMinFreq = Math.log2(minFreq);\n    const logMaxFreq = Math.log2(maxFreq);\n    const logFreqRange = logMaxFreq - logMinFreq;\n\n    const dotSize = 2;\n\n\n    for (let i = 1; i < freqs.length - 1; i++) {\n        const logFreq = Math.log2(freqs[i].frequency);\n        const x = (logFreq - logMinFreq) / logFreqRange * fftDetailCanvas.width;\n        const y = fftDetailCanvas.height - (freqs[i].magnitude/maxMagnitude * fftDetailCanvas.height * 0.9);\n\n        fftDetailCtx.beginPath();\n        fftDetailCtx.arc(x, y, dotSize, 0, 2 * Math.PI);\n        fftDetailCtx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n        fftDetailCtx.fill();\n\n        // Peak detection (crude)\n        if (\n            freqs[i].magnitude > thresholdMagnitude\n            && y < fftDetailCanvas.height * (1 - 0.1)\n            && freqs[i].magnitude > freqs[i - 1].magnitude\n            && freqs[i].magnitude > freqs[i + 1].magnitude) {\n            fftDetailCtx.fillStyle = 'white';\n            fftDetailCtx.font = '12px Signika';\n            const midiNote = 12 * Math.log2(freqs[i].frequency / 440) + 69;\n            const noteName = NOTE_NAMES[Math.round(midiNote) % 12];\n            fftDetailCtx.fillText(\n                `${freqs[i].frequency.toFixed(1)} Hz (${noteName})`,\n                x,\n                y - 10\n            );\n        }\n    }\n}\n\n// Initialize the canvas when it's transferred to the worker\nself.onmessage = function(e) {\n    const { type, data } = e.data;\n    \n    switch (type) {\n        case 'init':\n            if (e.data.isFFTDetail) {\n                fftDetailCanvas = e.data.mainCanvas;\n                fftDetailBgCanvas = e.data.bgCanvas;\n                fftDetailCtx = fftDetailCanvas.getContext('2d');\n                fftDetailBgCtx = fftDetailBgCanvas.getContext('2d');\n                fftDetailCtx.font = \"12px Signika\";\n                historySize = e.data.historySize;\n            } else {\n                mainCanvas = e.data.mainCanvas;\n                bgCanvas = e.data.bgCanvas;\n                mainCtx = mainCanvas.getContext('2d');\n                bgCtx = bgCanvas.getContext('2d');\n                bgCtx.font = \"20px Signika\";\n                mainCtx.font = \"20px Signika\";\n                historySize = e.data.historySize;\n                drawBackground();\n            }\n            break;\n            \n        case 'render':\n            if (data.isFFTDetail) {\n                renderFFTDetail(data.state);\n            } else {\n                renderVisualization(data.state);\n            }\n            break;\n            \n        case 'resize':\n            if (data.isFFTDetail) {\n                fftDetailCanvas.width = data.width;\n                fftDetailCanvas.height = data.height;\n                fftDetailBgCanvas.width = data.width;\n                fftDetailBgCanvas.height = data.height;\n            } else {\n                mainCanvas.width = data.width;\n                mainCanvas.height = data.height;\n                bgCanvas.width = data.width;\n                bgCanvas.height = data.height;\n                drawBackground();\n            }\n            historySize = data.historySize;\n            break;\n    }\n};\n"],"names":["mainCanvas","bgCanvas","fftDetailCanvas","fftDetailBgCanvas","mainCtx","bgCtx","fftDetailCtx","historySize","BACKGROUND_COLOR","NOTE_NAMES","getNoteClasses","midiNotes","map","midiNote","drawBackground","notePositions","values","height","min","max","exponent","arguments","length","undefined","value","Math","pow","getPosition","i","fillStyle","fillRect","fillText","concat","maxMagnitude","self","onmessage","e","_e$data","data","type","isFFTDetail","getContext","font","state","currentFs","currentRawFs","width","freqs","_toConsumableArray","sort","a","b","magnitude","slice","thresholdMagnitude","frequency","strokeStyle","lineWidth","beginPath","logMinFreq","log2","logFreqRange","x","y","arc","PI","fill","noteName","round","toFixed","renderFFTDetail","fHistory","shiftAmount","drawImage","noteClasses","hues","noteClass","j","hue","drawDynamicElements"],"sourceRoot":""}