{"version":3,"file":"674.bundle.js","mappings":"mBAMA,IAMIA,EACAC,EACAC,EALEC,EAAa,CAAC,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,KAahF,SAASC,EAAeC,GACpB,OAAOA,EAAUC,KAAI,SAAAC,GAAQ,OAAIA,EAAW,EAAE,GAClD,CA6DAC,KAAKC,UAAY,SAASC,GACtB,IAAAC,EAAuBD,EAAEE,KAAjBC,EAAIF,EAAJE,KAAMD,EAAID,EAAJC,KAEd,OAAQC,GACJ,IAAK,OAEDb,EAASU,EAAEE,KAAKZ,OAChBE,EAAcQ,EAAEE,KAAKV,aACrBD,EAAMD,EAAOc,WAAW,OACpBC,KAAO,eACX,MAEJ,IAAK,UAlEb,SAA6BC,GACzB,GAAKhB,GAAWC,EAAhB,CAGAA,EAAIgB,UA3BiB,eA4BrBhB,EAAIiB,SAAS,EAAG,EA9BE,EA8BChB,EAA6BF,EAAOmB,QAOvD,IALA,IAAMC,EAZV,SAAqBC,EAAQF,EAAQG,EAAKC,GAAmB,IAAdC,EAAQC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EACtD,OAAOJ,EAAOf,KAAI,SAAAsB,GAAK,OAAIT,EAAMU,KAAAC,KAAKF,EAAQN,IAAQC,EAAMD,GAASE,EAAQ,GACjF,CAU0BO,CAClB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,IACnC/B,EAAOmB,QAAS,GAAK,KAAM,GAGtBa,EAAI,EAAGA,EAAIZ,EAAcM,OAAQM,IACtC/B,EAAIgB,UAAY,UAChBhB,EAAIiB,SAAS,GAAIlB,EAAOmB,OAASC,EAAcY,GAvCjC,EAuCqC9B,EAA6B,GAIpF,IAAK,IAAI8B,EAAI,EAAGA,EAAIhB,EAAMiB,SAASP,OAAQM,IACvC,GAA0B,OAAtBhB,EAAMiB,SAASD,GAQnB,IAJA,IAAME,EAAQlB,EAAMiB,SAASD,GACvB3B,EAAiC6B,EArCxB5B,KAAI,SAAA6B,GAAS,OAAIA,EAAUA,UAAY,GAAK,GAAKN,KAAKO,KAAKD,EAAUA,UAAY,KAAO,GAAK,CAAC,IAsCvGE,EAAcjC,EAAeC,GAC7BiC,EAAOD,EAAY/B,KAAI,SAAAiC,GAAS,OAAoB,IAAfA,EAAU,EAAe,IAC3DC,EAAI,EAAGA,EAAInC,EAAUqB,OAAQc,IAAK,CACvC,IAAMC,EAAMH,EAAKE,GACXD,EAAYF,EAAYG,GAC9BvC,EAAIyC,YACJzC,EAAIgB,UAAY,QAAH0B,OAAWF,EAAG,iBAAAE,OAAgBT,EAAMM,GAAGI,UAAS,KAC7D3C,EAAI4C,IAzDM,EA0DNb,EAAoB,EACpBhC,EAAOmB,QAAWoB,EAAY,IAAK,GAAM,GAAKvC,EAAOmB,OA1D/C,IA4DN,EACA,EAAIU,KAAKiB,IAEb7C,EAAI8C,MACR,CAGJ,IAAK,IAAIf,EAAI,EAAGA,EAAIZ,EAAcM,OAAQM,IACtC/B,EAAIgB,UAAY,UAChBhB,EAAI+C,SAAS,GAADL,OACLxC,EAAW6B,IAAEW,OAAG3B,EAAMiC,eACzB,GACAjD,EAAOmB,OAASC,EAAcY,GAAK,EA/ChB,CAkD/B,CAiBYkB,CAAoBtC,EAAKI,OACzB,MAEJ,IAAK,SAEDhB,EAAOmD,MAAQvC,EAAKuC,MACpBnD,EAAOmB,OAASP,EAAKO,OACrBjB,EAAcU,EAAKV,YACnBD,EAAIc,KAAO,eAGvB,C","sources":["webpack://tuner/./src/visualizer.worker.js"],"sourcesContent":["// Worker script for handling visualization with OffscreenCanvas\n\n// Import required functions\nimport { gaussianWindow, hanningWindow } from './window_functions.js';\n\n// Constants for visualization\nconst HISTORY_SCALE = 1;\nconst CIRCLE_RADIUS = 1.5;\nconst BACKGROUND_COLOR = \"rgb(16,7,25)\";\nconst NOTE_NAMES = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n// Canvas and rendering context\nlet canvas;\nlet ctx;\nlet historySize;\n\n// Convert frequency to MIDI note number\nfunction frequencyToMidiNotes(frequencies) {\n    return frequencies.map(frequency => frequency.frequency > 31 ? 12 * Math.log2(frequency.frequency / 440) + 69 : 0);\n}\n\n// Get note class (0-11) from MIDI note number\nfunction getNoteClasses(midiNotes) {\n    return midiNotes.map(midiNote => midiNote % 12);\n}\n\nfunction getPosition(values, height, min, max, exponent = 2) {\n    return values.map(value => height * ((value - min) / (max - min)) ** exponent);\n}\n\n// Draw visualization components\nfunction renderVisualization(state) {\n    if (!canvas || !ctx) return;\n    \n    // Clear canvas\n    ctx.fillStyle = BACKGROUND_COLOR;\n    ctx.fillRect(0, 0, historySize * HISTORY_SCALE, canvas.height);\n    \n    const notePositions = getPosition(\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], \n        canvas.height, -0.5, 11.5, 1\n    );\n    \n    for (let i = 0; i < notePositions.length; i++) {\n        ctx.fillStyle = \"#D0D7DE\";\n        ctx.fillRect(50, canvas.height - notePositions[i], historySize * HISTORY_SCALE, 1);\n    }\n    \n    // Draw frequency history\n    for (let i = 0; i < state.fHistory.length; i++) {\n        if (state.fHistory[i] === null) {\n            continue;\n        }\n        \n        const freqs = state.fHistory[i];\n        const midiNotes = frequencyToMidiNotes(freqs);\n        const noteClasses = getNoteClasses(midiNotes);\n        const hues = noteClasses.map(noteClass => (noteClass+3) * (360 / 12));\n        for (let j = 0; j < midiNotes.length; j++) {\n            const hue = hues[j];\n            const noteClass = noteClasses[j];\n            ctx.beginPath();\n            ctx.fillStyle = `hsla(${hue}, 100%, 70%, ${freqs[j].magnitude})`;\n            ctx.arc(\n                i * HISTORY_SCALE + 4 * HISTORY_SCALE, \n                canvas.height - ((noteClass + 0.5)%12) / 12 * canvas.height, \n                CIRCLE_RADIUS, \n                0, \n                2 * Math.PI\n            );\n            ctx.fill();\n        }\n    }\n    \n    for (let i = 0; i < notePositions.length; i++) {\n        ctx.fillStyle = \"#D0D7DE\";\n        ctx.fillText(\n            `${NOTE_NAMES[i]}${state.currentOctave}`, \n            10, \n            canvas.height - notePositions[i] + 7\n        );\n    }\n}\n\n// Initialize the canvas when it's transferred to the worker\nself.onmessage = function(e) {\n    const { type, data } = e.data;\n    \n    switch (type) {\n        case 'init':\n            // Initialize canvas\n            canvas = e.data.canvas;\n            historySize = e.data.historySize;\n            ctx = canvas.getContext('2d');\n            ctx.font = \"20px Signika\";\n            break;\n            \n        case 'render':\n            // Render visualization with the provided state\n            renderVisualization(data.state);\n            break;\n            \n        case 'resize':\n            // Handle canvas resize\n            canvas.width = data.width;\n            canvas.height = data.height;\n            historySize = data.historySize;\n            ctx.font = \"20px Signika\";\n            break;\n    }\n};"],"names":["canvas","ctx","historySize","NOTE_NAMES","getNoteClasses","midiNotes","map","midiNote","self","onmessage","e","_e$data","data","type","getContext","font","state","fillStyle","fillRect","height","notePositions","values","min","max","exponent","arguments","length","undefined","value","Math","pow","getPosition","i","fHistory","freqs","frequency","log2","noteClasses","hues","noteClass","j","hue","beginPath","concat","magnitude","arc","PI","fill","fillText","currentOctave","renderVisualization","width"],"sourceRoot":""}