{"version":3,"file":"674.bundle.js","mappings":"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","sources":["webpack://tuner/./src/visualizer.worker.js"],"sourcesContent":["// Worker script for handling visualization with OffscreenCanvas\n\n// Constants for visualization\nconst HISTORY_SCALE = 1;\nconst CIRCLE_RADIUS = 1;\nconst BACKGROUND_COLOR = \"rgb(16,7,25)\";\nconst NOTE_NAMES = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\nconst SQUISH_FACTOR = 0.3;\n\n// Canvases and rendering contexts\nlet mainCanvas;\nlet bgCanvas;\nlet fftDetailCanvas;\nlet fftDetailBgCanvas;\nlet mainCtx;\nlet bgCtx;\nlet fftDetailCtx;\nlet fftDetailBgCtx;\n\n// Convert frequency to MIDI note number\nfunction frequencyToMidiNotes(frequencies) {\n    return frequencies.map(frequency => frequency.frequency > 31 ? 12 * Math.log2(frequency.frequency / 440) + 69 : 0);\n}\n\n// Get note class (0-11) from MIDI note number\nfunction getNoteClasses(midiNotes) {\n    return midiNotes.map(midiNote => midiNote % 12);\n}\n\nfunction getPosition(values, height, min, max, exponent = 2) {\n    return values.map(value => height * ((value - min) / (max - min)) ** exponent);\n}\n\n// Draw background elements (static)\nfunction drawBackground() {\n    if (!bgCanvas || !bgCtx) return;\n    \n    const notePositions = getPosition(\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], \n        bgCanvas.height, -0.5, 11.5, 1\n    );\n    \n    // Draw note lines\n    for (let i = 0; i < notePositions.length; i++) {\n        bgCtx.fillStyle = \"rgba(208, 215, 222, 0.5)\";\n        bgCtx.fillRect(35, bgCanvas.height - notePositions[i], mainCanvas.width, 1);\n    }\n\n    // Draw note labels\n    for (let i = 0; i < notePositions.length; i++) {\n        bgCtx.fillStyle = \"rgba(208, 215, 222, 1)\";\n        bgCtx.fillText(\n            `${NOTE_NAMES[i]}`, \n            10, \n            bgCanvas.height - notePositions[i] + 7\n        );\n    }\n}\n\n// Draw dynamic elements\nfunction drawDynamicElements(state) {\n    if (!mainCanvas || !mainCtx) return;\n    \n    if (state.fHistory.length == 0) {\n        return;\n    }\n    \n    const shiftAmount = Math.round(state.fHistory.length * SQUISH_FACTOR); \n    mainCtx.drawImage(mainCanvas, shiftAmount, 0, \n        mainCanvas.width - shiftAmount, mainCanvas.height,\n        0, 0, mainCanvas.width - shiftAmount, mainCanvas.height);\n    \n    // Clear rightmost column where new circles will be drawn\n    mainCtx.fillStyle = BACKGROUND_COLOR;\n    mainCtx.fillRect(mainCanvas.width - shiftAmount, 0, \n        shiftAmount, mainCanvas.height);\n\n    for (let i = 0; i < state.fHistory.length; i++) {\n        if (state.fHistory[i] === null || state.fHistory[i].length == 0) continue;\n        \n        const freqs = state.fHistory[i].slice(0, 30);\n        const midiNotes = frequencyToMidiNotes(freqs);\n        const noteClasses = getNoteClasses(midiNotes);\n        const hues = noteClasses.map(noteClass => (noteClass+3) * (360 / 12));\n        \n        for (let j = 0; j < midiNotes.length; j++) {\n            const hue = hues[j];\n            const noteClass = noteClasses[j];\n            mainCtx.beginPath();\n            mainCtx.fillStyle = `hsla(${hue}, 100%, 70%, ${freqs[j].magnitude})`;\n            mainCtx.arc(\n                mainCanvas.width - i,\n                mainCanvas.height - ((noteClass + 0.5)%12) / 12 * mainCanvas.height,\n                CIRCLE_RADIUS,\n                0,\n                2 * Math.PI\n            );\n            mainCtx.fill();\n        }\n    }\n}\n\nfunction renderVisualization(state) {\n    drawDynamicElements(state);\n}\n\nlet maxMagnitude = 0;\n// Draw detailed FFT spectrum\nfunction renderFFTDetail(state) {\n    if (!fftDetailCanvas || !fftDetailCtx || !state.currentFs) {return};\n    if (state.currentRawFs.length === 0) return;\n\n    // Clear canvas\n    fftDetailCtx.fillStyle = BACKGROUND_COLOR;\n    fftDetailCtx.fillRect(0, 0, fftDetailCanvas.width, fftDetailCanvas.height);\n\n    let freqs = [...state.currentRawFs].sort((a, b) => b.magnitude - a.magnitude).slice(0, 1000);\n    const thresholdMagnitude = freqs.length > 0 ? freqs[freqs.length*0.1].magnitude : 1e9;\n    maxMagnitude = Math.max(maxMagnitude*0.99995, freqs[0].magnitude);\n    freqs = [...freqs].sort((a, b) => a.frequency - b.frequency);\n    if (freqs.length === 0) return;\n\n    const minFreq = 20;\n    const maxFreq = 20000;\n\n    // Draw frequency spectrum\n    fftDetailCtx.strokeStyle = 'rgba(255, 255, 255, 0.7)';\n    fftDetailCtx.lineWidth = 2;\n    fftDetailCtx.beginPath();\n\n    const logMinFreq = Math.log2(minFreq);\n    const logMaxFreq = Math.log2(maxFreq);\n    const logFreqRange = logMaxFreq - logMinFreq;\n\n    const dotSize = 2;\n\n    for (let i = 1; i < freqs.length - 1; i++) {\n        const logFreq = Math.log2(freqs[i].frequency);\n        const x = (logFreq - logMinFreq) / logFreqRange * fftDetailCanvas.width;\n        const y = fftDetailCanvas.height - (freqs[i].magnitude/maxMagnitude * fftDetailCanvas.height * 0.9);\n\n        fftDetailCtx.beginPath();\n        fftDetailCtx.arc(x, y, dotSize, 0, 2 * Math.PI);\n        fftDetailCtx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n        fftDetailCtx.fill();\n\n        // Peak detection (crude)\n        if (\n            freqs[i].magnitude > thresholdMagnitude\n            && y < fftDetailCanvas.height * (1 - 0.1)\n            && freqs[i].magnitude > freqs[i - 1].magnitude\n            && freqs[i].magnitude > freqs[i + 1].magnitude) {\n            fftDetailCtx.fillStyle = 'white';\n            fftDetailCtx.font = '12px Signika';\n            const midiNote = 12 * Math.log2(freqs[i].frequency / 440) + 69;\n            const noteName = NOTE_NAMES[Math.round(midiNote) % 12];\n            fftDetailCtx.fillText(\n                `${freqs[i].frequency.toFixed(1)} Hz (${noteName})`,\n                x,\n                y - 10\n            );\n        }\n    }\n}\n\n// Initialize the canvas when it's transferred to the worker\nself.onmessage = function(e) {\n    const { type, data } = e.data;\n    \n    if (data.isFFTDetail) {\n        switch (type) {\n            case 'init':\n                fftDetailCanvas = data.mainCanvas;\n                fftDetailBgCanvas = data.bgCanvas;\n                fftDetailCtx = fftDetailCanvas.getContext('2d');\n                fftDetailBgCtx = fftDetailBgCanvas.getContext('2d');\n                fftDetailCtx.font = \"12px Signika\";\n                break;\n                \n            case 'render':\n                if (data.state) renderFFTDetail(data.state);\n                break;\n        }\n    } else {\n        switch (type) {\n            case 'init':\n                mainCanvas = data.mainCanvas;\n                bgCanvas = data.bgCanvas;\n                mainCtx = mainCanvas.getContext('2d');\n                bgCtx = bgCanvas.getContext('2d');\n                bgCtx.font = \"20px Signika\";\n                mainCtx.font = \"20px Signika\";\n                drawBackground();\n                break;\n                \n            case 'render':\n                renderVisualization(data.state);\n                break;\n        }\n    }\n};\n"],"names":["mainCanvas","bgCanvas","fftDetailCanvas","fftDetailBgCanvas","mainCtx","bgCtx","fftDetailCtx","BACKGROUND_COLOR","NOTE_NAMES","getNoteClasses","midiNotes","map","midiNote","maxMagnitude","self","onmessage","e","_e$data","data","type","isFFTDetail","getContext","font","state","currentFs","currentRawFs","length","fillStyle","fillRect","width","height","freqs","_toConsumableArray","sort","a","b","magnitude","slice","thresholdMagnitude","Math","max","frequency","strokeStyle","lineWidth","beginPath","logMinFreq","log2","logFreqRange","i","x","y","arc","PI","fill","noteName","round","fillText","concat","toFixed","renderFFTDetail","notePositions","values","min","exponent","arguments","undefined","value","pow","getPosition","drawBackground","fHistory","shiftAmount","drawImage","noteClasses","hues","noteClass","j","hue","drawDynamicElements"],"sourceRoot":""}