{"version":3,"file":"674.bundle.js","mappings":"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","sources":["webpack://tuner/./src/visualizer.worker.js"],"sourcesContent":["// Worker script for handling visualization with OffscreenCanvas\n\n// Constants for visualization\nconst HISTORY_SCALE = 1;\nconst CIRCLE_RADIUS = 1.5;\nconst BACKGROUND_COLOR = \"rgb(16,7,25)\";\nconst NOTE_NAMES = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n// Canvases and rendering contexts\nlet mainCanvas;\nlet bgCanvas;\nlet mainCtx;\nlet bgCtx;\nlet historySize;\n\n// Convert frequency to MIDI note number\nfunction frequencyToMidiNotes(frequencies) {\n    return frequencies.map(frequency => frequency.frequency > 31 ? 12 * Math.log2(frequency.frequency / 440) + 69 : 0);\n}\n\n// Get note class (0-11) from MIDI note number\nfunction getNoteClasses(midiNotes) {\n    return midiNotes.map(midiNote => midiNote % 12);\n}\n\nfunction getPosition(values, height, min, max, exponent = 2) {\n    return values.map(value => height * ((value - min) / (max - min)) ** exponent);\n}\n\n// Draw background elements (static)\nfunction drawBackground() {\n    if (!bgCanvas || !bgCtx) return;\n    \n    const notePositions = getPosition(\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], \n        bgCanvas.height, -0.5, 11.5, 1\n    );\n    \n    // Draw note lines\n    for (let i = 0; i < notePositions.length; i++) {\n        bgCtx.fillStyle = \"rgba(208, 215, 222, 0.5)\";\n        bgCtx.fillRect(35, bgCanvas.height - notePositions[i], historySize * HISTORY_SCALE, 1);\n    }\n    \n    // Draw note labels\n    for (let i = 0; i < notePositions.length; i++) {\n        bgCtx.fillStyle = \"rgba(208, 215, 222, 1)\";\n        bgCtx.fillText(\n            `${NOTE_NAMES[i]}`, \n            10, \n            bgCanvas.height - notePositions[i] + 7\n        );\n    }\n}\n\n// Draw dynamic elements\nfunction drawDynamicElements(state) {\n    if (!mainCanvas || !mainCtx) return;\n    \n    if (state.fHistory.length == 0) {\n        return;\n    }\n    \n    const shiftAmount = state.fHistory.length; \n    mainCtx.drawImage(mainCanvas, shiftAmount, 0, \n        mainCanvas.width - shiftAmount, mainCanvas.height,\n        0, 0, mainCanvas.width - shiftAmount, mainCanvas.height);\n    \n    // Clear rightmost column where new circles will be drawn\n    mainCtx.fillStyle = BACKGROUND_COLOR;\n    mainCtx.fillRect(mainCanvas.width - shiftAmount, 0, \n        shiftAmount, mainCanvas.height);\n\n    for (let i = 0; i < state.fHistory.length; i++) {\n        if (state.fHistory[i] === null || state.fHistory[i].length == 0) continue;\n        \n        const freqs = state.fHistory[i];\n        const midiNotes = frequencyToMidiNotes(freqs);\n        const noteClasses = getNoteClasses(midiNotes);\n        const hues = noteClasses.map(noteClass => (noteClass+3) * (360 / 12));\n        \n        for (let j = 0; j < midiNotes.length; j++) {\n            const hue = hues[j];\n            const noteClass = noteClasses[j];\n            mainCtx.beginPath();\n            mainCtx.fillStyle = `hsla(${hue}, 100%, 70%, ${freqs[j].magnitude})`;\n            mainCtx.arc(\n                mainCanvas.width - i,\n                mainCanvas.height - ((noteClass + 0.5)%12) / 12 * mainCanvas.height,\n                CIRCLE_RADIUS,\n                0,\n                2 * Math.PI\n            );\n            mainCtx.fill();\n        }\n    }\n}\n\nfunction renderVisualization(state) {\n    // Draw circles first (main content)\n    drawDynamicElements(state);\n    // Then draw semi-transparent background on top\n    // drawBackground();\n}\n\n// Initialize the canvas when it's transferred to the worker\nself.onmessage = function(e) {\n    const { type, data } = e.data;\n    \n    switch (type) {\n        case 'init':\n            // Initialize canvases\n            mainCanvas = e.data.mainCanvas;\n            bgCanvas = e.data.bgCanvas;\n            historySize = e.data.historySize;\n            \n            mainCtx = mainCanvas.getContext('2d');\n            bgCtx = bgCanvas.getContext('2d');\n            \n            bgCtx.font = \"20px Signika\";\n            mainCtx.font = \"20px Signika\";\n            \n            // Draw initial background\n            drawBackground();\n            break;\n            \n        case 'render':\n            // Render visualization with the provided state\n            renderVisualization(data.state);\n            break;\n            \n        case 'resize':\n            // Handle canvas resize\n            mainCanvas.width = data.width;\n            mainCanvas.height = data.height;\n            bgCanvas.width = data.width;\n            bgCanvas.height = data.height;\n            historySize = data.historySize;\n            \n            bgCtx.font = \"20px Signika\";\n            mainCtx.font = \"20px Signika\";\n            \n            // Redraw background after resize\n            drawBackground();\n            break;\n    }\n};\n"],"names":["mainCanvas","bgCanvas","mainCtx","bgCtx","historySize","NOTE_NAMES","getNoteClasses","midiNotes","map","midiNote","drawBackground","notePositions","values","height","min","max","exponent","arguments","length","undefined","value","Math","pow","getPosition","i","fillStyle","fillRect","fillText","concat","self","onmessage","e","_e$data","data","type","getContext","font","state","fHistory","shiftAmount","drawImage","width","freqs","frequency","log2","noteClasses","hues","noteClass","j","hue","beginPath","magnitude","arc","PI","fill","drawDynamicElements"],"sourceRoot":""}